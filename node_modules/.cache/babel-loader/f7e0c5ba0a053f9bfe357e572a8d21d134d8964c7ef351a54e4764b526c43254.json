{"ast":null,"code":"var _jsxFileName = \"/Users/danielt/Thinkful/flashcard-o-matic1/src/Layout/Breadcrumb.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\n\n/** A component containing links back to pages in the path to current page\n *\n *  @param {array} crumbs\n *  an array of the pages to be in the breadcrumbed, [\"foo\", \"bar\", \"etc\"]\n *  @param {object} currentDeck\n *  stately object containing the current deck, {id, name, description}\n *  should only exist in routes including :deckId and :cardId\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Breadcrumb = ({\n  crumbs,\n  currentDeck\n}) => {\n  _s();\n  const {\n    deckId,\n    cardId\n  } = useParams();\n  const [breadcrumbs, setBreadcrumbs] = useState([]);\n  const routes = [{\n    path: \"/\",\n    name: \"Home\"\n  },\n  // Home\n  {\n    path: \"/decks/:deckId\",\n    name: \"Deck\"\n  },\n  // Deck\n  {\n    path: \"/decks/new\",\n    name: \"Create Deck\"\n  },\n  // CreateDeck\n  {\n    path: \"/decks/:deckId/study\",\n    name: \"Study\"\n  },\n  // Study\n  {\n    path: \"/decks/:deckId/edit\",\n    name: \"Edit Deck\"\n  },\n  // EditDeck\n  {\n    path: \"/decks/:deckId/cards/new\",\n    name: \"Add Card\"\n  },\n  // AddCard\n  {\n    path: \"/decks/:deckId/cards/:cardId/edit\",\n    name: \"Edit Card\"\n  } // EditCard\n  ];\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    async function loadBreadcrumbs() {\n      try {\n        const crumbArray = crumbs.map((crumb, key) => {\n          const found = routes.find(route => {\n            return route.name === crumb;\n          });\n          // special cases to use names based on the specific deck or card\n          if (found.path.includes(\":deckId\")) {\n            found.path = found.path.replace(\":deckId\", deckId);\n          }\n          if (found.path.includes(\":cardId\")) {\n            found.path = found.path.replace(\":cardId\", cardId);\n          }\n          if (found.name === \"Deck\") {\n            found.name = currentDeck.name;\n          }\n          if (found.name === \"Edit Card\") {\n            found.name = `Edit Card ${cardId}`;\n          }\n          // just a name for the current page, a link for everything else\n          if (crumbs.indexOf(crumb) === crumbs.length - 1) {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"breadcrumb-item active\",\n              children: found.name\n            }, key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 15\n            }, this);\n          } else {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"breadcrumb-item\",\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                to: found.path,\n                children: found.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 17\n              }, this)\n            }, key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 15\n            }, this);\n          }\n        });\n        setBreadcrumbs(crumbArray);\n      } catch (error) {\n        if (error.name === \"AbortError\") {\n          console.log(\"loadBreadcrumbs Aborted\");\n        } else {\n          throw error;\n        }\n      }\n    }\n    loadBreadcrumbs();\n    return () => abortController.abort();\n  }, [deckId, cardId, crumbs]);\n  return /*#__PURE__*/_jsxDEV(\"ol\", {\n    className: \"breadcrumb\",\n    children: breadcrumbs\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 12\n  }, this);\n};\n_s(Breadcrumb, \"sb0kqTHgSLH/3TprFGfM2YBJCLM=\", false, function () {\n  return [useParams];\n});\n_c = Breadcrumb;\nexport default Breadcrumb;\nvar _c;\n$RefreshReg$(_c, \"Breadcrumb\");","map":{"version":3,"names":["React","useEffect","useState","Link","useParams","jsxDEV","_jsxDEV","Breadcrumb","crumbs","currentDeck","_s","deckId","cardId","breadcrumbs","setBreadcrumbs","routes","path","name","abortController","AbortController","loadBreadcrumbs","crumbArray","map","crumb","key","found","find","route","includes","replace","indexOf","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","to","error","console","log","abort","_c","$RefreshReg$"],"sources":["/Users/danielt/Thinkful/flashcard-o-matic1/src/Layout/Breadcrumb.js"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {Link, useParams} from \"react-router-dom\";\n\n/** A component containing links back to pages in the path to current page\n *\n *  @param {array} crumbs\n *  an array of the pages to be in the breadcrumbed, [\"foo\", \"bar\", \"etc\"]\n *  @param {object} currentDeck\n *  stately object containing the current deck, {id, name, description}\n *  should only exist in routes including :deckId and :cardId\n */\n\nconst Breadcrumb = ({ crumbs, currentDeck }) => {\n  const { deckId, cardId } = useParams();\n  const [breadcrumbs, setBreadcrumbs] = useState([]);\n  const routes = [\n    { path: \"/\", name: \"Home\" }, // Home\n    { path: \"/decks/:deckId\", name: \"Deck\" }, // Deck\n    { path: \"/decks/new\", name: \"Create Deck\" }, // CreateDeck\n    { path: \"/decks/:deckId/study\", name: \"Study\" }, // Study\n    { path: \"/decks/:deckId/edit\", name: \"Edit Deck\" }, // EditDeck\n    { path: \"/decks/:deckId/cards/new\", name: \"Add Card\" }, // AddCard\n    { path: \"/decks/:deckId/cards/:cardId/edit\", name: \"Edit Card\" }, // EditCard\n  ];\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    async function loadBreadcrumbs() {\n      try {\n        const crumbArray = crumbs.map((crumb, key) => {\n          const found = routes.find((route) => {\n            return route.name === crumb;\n          });\n          // special cases to use names based on the specific deck or card\n          if (found.path.includes(\":deckId\")) {\n            found.path = found.path.replace(\":deckId\", deckId);\n          }\n          if (found.path.includes(\":cardId\")) {\n            found.path = found.path.replace(\":cardId\", cardId);\n          }\n          if (found.name === \"Deck\") {\n            found.name = currentDeck.name;\n          }\n          if (found.name === \"Edit Card\") {\n            found.name = `Edit Card ${cardId}`;\n          }\n          // just a name for the current page, a link for everything else\n          if (crumbs.indexOf(crumb) === crumbs.length - 1) {\n            return (\n              <li key={key} className=\"breadcrumb-item active\">\n                {found.name}\n              </li>\n            );\n          } else {\n            return (\n              <li key={key} className=\"breadcrumb-item\">\n                <Link to={found.path}>{found.name}</Link>\n              </li>\n            );\n          }\n        });\n        setBreadcrumbs(crumbArray);\n      } catch (error) {\n        if (error.name === \"AbortError\") {\n          console.log(\"loadBreadcrumbs Aborted\");\n        } else {\n          throw error;\n        }\n      }\n    }\n    loadBreadcrumbs();\n    return () => abortController.abort();\n  }, [deckId, cardId, crumbs]);\n    return <ol className=\"breadcrumb\">{breadcrumbs}</ol>;\n};\n\nexport default Breadcrumb;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}